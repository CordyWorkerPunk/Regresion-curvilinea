---
title: "AJUSTE POLINOMICO DE GRADO n"
output:
  html_document: default
  word_document: default
  pdf_document: default
date: "2023-03-09"
---



TENEMOS LA SIGUIENTE DATABASE:
```{r echo=FALSE, message=FALSE, warning=FALSE}
library(readr)
library(dplyr)
datos <- read.csv("Libro1.csv")
datos1 <- datos %>% 
  relocate(NUM, .before = RAND)
datos1
```
SU GRAFICA DISPERSION ES LA SIGUIENTE:
```{r}
plot(datos1$NUM, datos1$RAND, 
     main = "Gráfica de dispersión",
     xlab = "Variable X", ylab = "Variable Y",
     col = "blue", pch = 16)
```
Existe una curva por cada grado 
polinomial que se ajusta a los 
datos anteriores, ejemplo:




n = 1
```{r echo=FALSE}
polinomios <- poly(datos1$NUM, 1)
modelo <- lm(datos1$RAND ~ polinomios, data = datos1)
plot(datos1$NUM, datos1$RAND, main = "Polinomio de primer grado ajustado", xlab = "x", ylab = "y", col="blue",lwd = 4, pch = 16)
nuevos_datos <- data.frame(NUM = seq(min(datos1$NUM), max(datos1$NUM), 
                                     length = 23))
y_pred <- predict(modelo, newdata = nuevos_datos)
lines(nuevos_datos$NUM, y_pred, col = rgb(70/255, 90/255, 110/255))
resumen <- summary(modelo)
r_cuadrado <- resumen$r.squared
##COEFICIENTES
coefficients(modelo)
##GRADO DE FIABILIDAD
print(r_cuadrado)
```


n = 2
```{r echo=FALSE}
polinomios <- poly(datos1$NUM, 2)
modelo <- lm(datos1$RAND ~ polinomios, data = datos1)
plot(datos1$NUM, datos1$RAND, main = "Polinomio de segundo grado ajustado", xlab = "x", ylab = "y", col="blue",lwd = 4, pch = 16)
nuevos_datos <- data.frame(NUM = seq(min(datos1$NUM), max(datos1$NUM), 
                                     length = 23))
y_pred <- predict(modelo, newdata = nuevos_datos)
lines(nuevos_datos$NUM, y_pred, col = rgb(70/255, 90/255, 110/255))
resumen <- summary(modelo)
r_cuadrado <- resumen$r.squared
coefficients(modelo) 
print(r_cuadrado)
```


n = 4
```{r echo=FALSE}
polinomios <- poly(datos1$NUM, 4)
modelo <- lm(datos1$RAND ~ polinomios, data = datos1)
plot(datos1$NUM, datos1$RAND, main = "Polinomio de cuarto grado ajustado", xlab = "x", ylab = "y", col="blue",lwd = 4, pch = 16)
nuevos_datos <- data.frame(NUM = seq(min(datos1$NUM), max(datos1$NUM), 
                                     length = 23))
y_pred <- predict(modelo, newdata = nuevos_datos)
lines(nuevos_datos$NUM, y_pred, col = rgb(70/255, 90/255, 110/255))
resumen <- summary(modelo)
r_cuadrado <- resumen$r.squared
coefficients(modelo) 
print(r_cuadrado)
```


n = 8
```{r echo=FALSE}
polinomios <- poly(datos1$NUM, 8)
modelo <- lm(datos1$RAND ~ polinomios, data = datos1)
plot(datos1$NUM, datos1$RAND, main = "Polinomio de octavo grado ajustado", xlab = "x", ylab = "y", col="blue",lwd = 4, pch = 16)
nuevos_datos <- data.frame(NUM = seq(min(datos1$NUM), max(datos1$NUM), 
                                     length = 23))
y_pred <- predict(modelo, newdata = nuevos_datos)
lines(nuevos_datos$NUM, y_pred, col = rgb(70/255, 90/255, 110/255))
resumen <- summary(modelo)
r_cuadrado <- resumen$r.squared
coefficients(modelo) 
print(r_cuadrado)
```


n = 16
```{r echo=FALSE}
polinomios <- poly(datos1$NUM, 16)
modelo <- lm(datos1$RAND ~ polinomios, data = datos1)
plot(datos1$NUM, datos1$RAND, main = "Polinomio de dieciseisavo grado ajustado", xlab = "x", ylab = "y", col="blue",lwd = 4, pch = 16)
nuevos_datos <- data.frame(NUM = seq(min(datos1$NUM), max(datos1$NUM), 
                                     length = 23))
y_pred <- predict(modelo, newdata = nuevos_datos)
lines(nuevos_datos$NUM, y_pred, col = rgb(70/255, 90/255, 110/255))
resumen <- summary(modelo)
r_cuadrado <- resumen$r.squared
coefficients(modelo) 
print(r_cuadrado)
```


DONDE DEBAJO DE CADA GRAFICA LA PRIMERA TABLA REPRESENTA LOS COEFICIENTES DEL POLINOMIO Y LA SEGUNDA REPRESENTA EL COEFICIENTE DE APROXIMACION R^2.

## INFORMACION ESTADISTICA


```{r echo=FALSE}
Normal <- function(x,y,z){
  (1/(y*(2*pi)^(1/2)))*exp(1)^(-((x-z)^2)/(2*y^2))
}

x <- seq(0, 1.3, by = 0.01)
plot(x, Normal(x,var(datos1$RAND),mean(datos1$RAND)),
     type = "l", col = "magenta", lwd = 2,
     xlab = "x", ylab = "Normal(x)")
axis(side = 1, at = seq(0, 1.3, by = 0.2))
mean(datos1$RAND)
var(datos1$RAND)
z <- mean(datos1$RAND)
y <- var(datos1$RAND)
f <- function(x) Normal(x, y, z)
result <- integrate(f, lower = 0.5, upper = 0.7)
result$value

```

